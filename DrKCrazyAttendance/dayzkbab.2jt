using MySql.Data.MySqlClient;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DrKCrazyAttendance
{
    public class Course
    {
        public Course()
        {
            Days = new List<DayOfWeek>();
        }

        public Course(string classroom) : this()
        {
            this.ClassRoom = classroom;
        }

        public Course(int id, string classroom, string courseName, string section,
            string instructor, List<DayOfWeek> days, DateTime startDate, DateTime endDate, DateTime startTime,
            DateTime endTime, bool logTardy, TimeSpan gracePeriod)
        {
            this.Id = id;
            this.Days = days;
            this.ClassRoom = classroom;
            this.CourseName = courseName;
            this.Section = section;
            this.Instructor = instructor;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.GracePeriod = gracePeriod;
            this.LogTardy = logTardy;
        }

        #region Properties
        public int Id
        {
            get;
            private set;
        }

        public List<DayOfWeek> Days
        {
            get;
            set;
        }

        public string FriendlyDays
        {
            get
            {
                StringBuilder sb = new StringBuilder();
                Days.Sort();
                foreach (DayOfWeek day in Days)
                {
                    switch (day)
                    {
                        case DayOfWeek.Monday:
                            sb.Append("M");
                            break;
                        case DayOfWeek.Tuesday:
                            sb.Append("T");
                            break;
                        case DayOfWeek.Wednesday:
                            sb.Append("W");
                            break;
                        case DayOfWeek.Thursday:
                            sb.Append("R");
                            break;
                        case DayOfWeek.Friday:
                            sb.Append("F");
                            break;
                        case DayOfWeek.Saturday:
                            sb.Append("S");
                            break;
                    }
                }
                return sb.ToString();
            }
        }

        public string Year
        {
            get
            {
                return StartDate.Year.ToString();
            }
        }

        public string ClassRoom
        {
            get;
            set;
        }

        public string CourseName
        {
            get;
            set;
        }

        public string Instructor
        {
            get;
            set;
        }

        public string Section
        {
            get;
            set;
        }

        public DateTime StartDate
        {
            get;
            set;
        }

        public DateTime EndDate
        {
            get;
            set;
        }

        public DateTime StartTime
        {
            get;
            set;
        }

        public DateTime EndTime
        {
            get;
            set;
        }


        public TimeSpan GracePeriod
        {
            get;
            set;
        }

        public bool LogTardy
        {
            get;
            set;
        }
        #endregion

        public static List<DayOfWeek> GetDaysFromFriendly(string fDays)
        {
            List<DayOfWeek> days = new List<DayOfWeek>();
            foreach (char day in fDays)
            {
                switch (day)
                {
                    case 'M':
                        days.Add(DayOfWeek.Monday);
                        break;
                    case 'T':
                        days.Add(DayOfWeek.Tuesday);
                        break;
                    case 'W':
                        days.Add(DayOfWeek.Wednesday);
                        break;
                    case 'R':
                        days.Add(DayOfWeek.Thursday);
                        break;
                    case 'F':
                        days.Add(DayOfWeek.Friday);
                        break;
                    case 'S':
                        days.Add(DayOfWeek.Saturday);
                        break;
                }
            }
            return days;
        }

        #region Sql methods
        public static List<Course> FetchAll(string classroom)
        {
            List<Course> courses = new List<Course>();

            string query = "SELECT * FROM Courses WHERE classroom = @class";
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("@class", classroom);

            DataTable table = DatabaseManager.GetDataTableFromQuery(query, parameters);
            foreach (DataColumn row in table.Rows)
            {
                Course course = GetCourseFromDataRow();
                courses.Add(course);
            }
            
              
            return courses;
        }

        public static Course GetCourseFromDataRow(DataColumn)
        {
            int id = rdr.GetInt32(0);
            string cRoom = rdr.GetString(1);
            string courseName = rdr.GetString(2);
            string section = rdr.GetString(3);
            string instructor = rdr.GetString(4);
            //Convert freindly days into list of days
            List<DayOfWeek> days = Course.GetDaysFromFriendly(rdr.GetString(5));

            DateTime startDate = rdr.GetDateTime(6);
            DateTime endDate = rdr.GetDateTime(7);
            DateTime startTime = rdr.GetDateTime(8);
            DateTime endTime = rdr.GetDateTime(9);
            bool logTardy = rdr.GetBoolean(10);
            TimeSpan gracePeriod = rdr.GetTimeSpan(11);

            return new Course(id, cRoom, courseName, section, instructor, days,
                startDate, endDate, startTime, endTime, logTardy, gracePeriod);
        }

        public void Add(Course course)
        {
            if (!Courses.Contains(course))
            {
                Courses.Add(course);

                //insert into db
                string query = "INSERT INTO Courses(classroom, name, section, semester, days," +
                    "startDate, endDate, startTime, endTime, logTardy, gracePeriod) VALUES (@class, @name, @section," +
                    "@semester, @days, @startDate, @endDate, @startTime, @endTime, @logTardy, @gracePeriod)";
                ExecuteCourseQuery(course, query);

            }
            else
            {
                //if the course already exists, we need to go update it.
                Update(course);
            }
        }

        public void Remove(Course course)
        {
            string query = "DELETE FROM Courses WHERE id=@id";
            ExecuteCourseQuery(course, query, false);
        }

        public void Update(Course course)
        {
            //refresh the list to display the updated item
            string query = "UPDATE Courses SET classroom=@class, name=@name, section=@section, semester=@semester," +
                "days=@days, startDate=@startDate, endDate=@endDate, startTime=@startTime, endTime=@endTime," +
                "logTardy=@logTardy, gracePeriod=@gracePeriod WHERE id=@id";
            ExecuteCourseQuery(course, query);

        }

        private void ExecuteCourseQuery(Course course, string query)
        {
            ExecuteCourseQuery(course, query, true);
        }

        private void ExecuteCourseQuery(Course course, string query, bool persist)
        {
            MySqlConnection conn = null;
            using (conn = DatabaseManager.Connect())
            {
                try
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = query;
                    cmd.Prepare();

                    if (course.Id != 0)
                        cmd.Parameters.AddWithValue("@id", course.Id);
                    if (persist)
                    {
                        cmd.Parameters.AddWithValue("@class", course.ClassRoom);
                        cmd.Parameters.AddWithValue("@name", course.CourseName);
                        cmd.Parameters.AddWithValue("@section", course.Section);
                        cmd.Parameters.AddWithValue("@semester", course.Semester);
                        cmd.Parameters.AddWithValue("@days", course.FriendlyDays);
                        cmd.Parameters.AddWithValue("@startDate", course.StartDate);
                        cmd.Parameters.AddWithValue("@endDate", course.EndDate);
                        cmd.Parameters.AddWithValue("@startTime", course.StartTime);
                        cmd.Parameters.AddWithValue("@endTime", course.EndTime);
                        cmd.Parameters.AddWithValue("@logTardy", course.LogTardy);
                        cmd.Parameters.AddWithValue("@gracePeriod", course.GracePeriod);
                    }
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                    /*ignore*/
                }
            }
        }

        public Course GetCourse(string courseName, string section)
        {
            foreach (Course course in Courses)
            {
                if (course.CourseName.Equals(courseName) && course.Section.Equals(section))
                {
                    return course;
                }
            }
            return null;
        }

        public Course GetCourse(int id)
        {
            foreach (Course course in Courses)
            {
                if (course.Id == id)
                {
                    return course;
                }
            }
            return null;
        }
        #endregion
        
    }
}
